cmake_minimum_required(VERSION 2.8)
project(dartpy)

# TODO: This should be set by DART.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wno-deprecated")

find_package(PythonInterp REQUIRED)
execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
  "from distutils.sysconfig import get_python_lib;\
  print(get_python_lib(plat_specific=True, prefix=''))"
  OUTPUT_VARIABLE PYTHON_SITE_PACKAGES
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

find_package(Boost REQUIRED COMPONENTS python thread)
find_package(DART REQUIRED)
find_package(PythonLibs REQUIRED)

include_directories(SYSTEM
  ${Boost_INCLUDE_DIRS}
  ${DART_INCLUDE_DIRS}
  ${PYTHON_INCLUDE_DIRS}
  "/opt/ros/indigo/include" # TODO: This should not be necessary.
)

# Check whether the CXX compiler and boost::python support get_pointer for
# std::shared_ptr<T> references.
include(CheckCXXSourceCompiles)
set(CMAKE_REQUIRED_INCLUDES
  ${Boost_INCLUDE_DIRS}
  ${PYTHON_INCLUDE_DIRS}
)
set(CMAKE_REQUIRED_LIBRARIES
  ${Boost_LIBRARIES}
  ${PYTHON_LIBRARIES}
)
check_cxx_source_compiles(
  "
  #include <memory>
  #include <boost/python.hpp>
  int main() { std::shared_ptr<int> ptr; int *p = boost::get_pointer(ptr); }
  "
  DARTPY_HAS_STD_SHARED_GET_POINTER
)

# Generate a header file for the DARTPY_HAS_STD_SHARED_GET_POINTER flag.
configure_file("cmake/config.h.in"
  "include/dartpy/config.h"
)
include_directories(
  "include"
  "${CMAKE_CURRENT_BINARY_DIR}/include"
)

# Load the file auto-generated by Chimera.
file(STRINGS "src/generated/manifest.txt"
  chimera_GENERATED_SOURCES
  NO_HEX_CONVERSION
)

add_library("${PROJECT_NAME}" SHARED
  src/BodyNode.cpp
  src/Skeleton.cpp
  src/template_registry.cpp
  ${chimera_GENERATED_SOURCES}
)
target_link_libraries("${PROJECT_NAME}"
  ${DART_LIBRARIES}
  ${Boost_PYTHON_LIBRARIES}
  ${PYTHON_LIBRARIES}
)
set_target_properties("${PROJECT_NAME}" PROPERTIES
  PREFIX ""
  SUFFIX ".so"
  LINKER_LANGUAGE CXX
)

install(TARGETS "${PROJECT_NAME}"
  LIBRARY DESTINATION "${PYTHON_SITE_PACKAGES}"
)
install(DIRECTORY "include/" "${CMAKE_CURRENT_BINARY_DIR}/include/"
  DESTINATION "include"
)

# Add a "bind" target to re-generate bindings using Chimera.
include(ExternalProject)
ExternalProject_Add(bind
  BUILD_ALWAYS 1
  DOWNLOAD_COMMAND ""
  INSTALL_COMMAND ""
  SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/chimera"
)
set_target_properties(bind PROPERTIES
  EXCLUDE_FROM_ALL TRUE
)
