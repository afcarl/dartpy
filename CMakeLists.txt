cmake_minimum_required(VERSION 2.8)
project(dartpy)

set(chimera_CONFIGURATION "${PROJECT_SOURCE_DIR}/chimera.yml")
set(chimera_GENERATED_DIR "${PROJECT_SOURCE_DIR}/src_generated")
set(chimera_COMPILE_DATABASE "${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Enable C++11. This is necessary to use DART.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_CXX_FLAGS "-Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")

# Use MACOSX_RPATH by default on OS X. This was added in CMake 2.8.12 and
# became default in CMake 3.0. Explicitly setting this policy is necessary to
# suppress a warning in CMake 3.0 and above.
if(POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()

find_package(PythonInterp REQUIRED)
execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
  "from distutils.sysconfig import get_python_lib;\
  print(get_python_lib(plat_specific=True, prefix=''))"
  OUTPUT_VARIABLE PYTHON_SITE_PACKAGES
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

find_package(Boost REQUIRED COMPONENTS python thread)
find_package(DART REQUIRED COMPONENTS core)
#find_package(FCL REQUIRED)
find_package(PythonLibs REQUIRED)


find_package(chimera)
if(${chimera_FOUND})
  message(STATUS "Found Chimera. You can use Chimera to re-generate"
                 " Boost.Python bindings by building the 'bind' target.")
else()
  message(WARNING "Unable to find Chimera. You cannot re-generate Boost.Python"
                  " bindings.")
endif()

include_directories(SYSTEM
  ${Boost_INCLUDE_DIRS}
  ${DART_INCLUDE_DIRS}
  ${PYTHON_INCLUDE_DIRS}
  "/opt/ros/indigo/include"
)
include_directories(
  "include"
)

# Check whether the CXX compiler and boost::python support get_pointer for
# std::shared_ptr<T> references.
include(CheckCXXSourceCompiles)
set(CMAKE_REQUIRED_INCLUDES
  ${Boost_INCLUDE_DIRS}
  ${PYTHON_INCLUDE_DIRS}
)
set(CMAKE_REQUIRED_LIBRARIES
  ${Boost_LIBRARIES}
  ${PYTHON_LIBRARIES}
)

check_cxx_source_compiles(
  "
  #include <memory>
  #include <boost/python.hpp>
  int main() { std::shared_ptr<int> ptr; int *p = boost::get_pointer(ptr); }
  "
  HAS_STD_SHARED_GET_POINTER
)
if(HAS_STD_SHARED_GET_POINTER)
  add_definitions(-DHAS_STD_SHARED_GET_POINTER)
endif(HAS_STD_SHARED_GET_POINTER)

# Build a placeholder library to generate the compile_commands.json database.
set(chimera_SOURCE "${PROJECT_SOURCE_DIR}/src/placeholder.cpp")
add_library("${PROJECT_NAME}_placeholder" SHARED EXCLUDE_FROM_ALL
  "${chimera_SOURCE}"
)
target_link_libraries("${PROJECT_NAME}_placeholder"
  ${DART_LIBRARIES}
)

# Use Chimera to generate the Boost.Python bindings.
find_path(DART_HEADER_BASE_PATH "dart.h"
  PATH_SUFFIXES "dart"
  HINTS ${DART_INCLUDE_DIRS}
  DOC "DART header file"
  NO_DEFAULT_PATH
)
set(DART_HEADER_PATH "${DART_HEADER_BASE_PATH}/dart.h")

add_custom_target(bind
  COMMAND "${chimera_EXECUTABLE}"
    -m "${PROJECT_NAME}"
    -c "${chimera_CONFIGURATION}"
    -o "${chimera_GENERATED_DIR}"
    -p "${chimera_COMPILE_DATABASE}"
    "${chimera_SOURCE}"
    > "${chimera_GENERATED_DIR}/manifest.txt"
  VERBATIM
  COMMENT "Generating bindings"
  SOURCES
    "${chimera_CONFIGURATION}"
    "${chimera_SOURCE}"
)

file(STRINGS "${chimera_GENERATED_DIR}/manifest.txt" DARTPY_SOURCES
  NO_HEX_CONVERSION
)

add_library("${PROJECT_NAME}" SHARED
  src/BodyNode.cpp
  ${DARTPY_SOURCES} # Auto-generated by Chimera.
)
target_link_libraries("${PROJECT_NAME}"
  ${DART_LIBRARIES}
  ${Boost_PYTHON_LIBRARIES}
  ${PYTHON_LIBRARIES}
)
set_target_properties("${PROJECT_NAME}" PROPERTIES
  PREFIX ""
  SUFFIX ".so"
  LINKER_LANGUAGE CXX
)
install(TARGETS "${PROJECT_NAME}"
  LIBRARY DESTINATION "${PYTHON_SITE_PACKAGES}"
)
